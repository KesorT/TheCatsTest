{"uid":"7ad344b9042515f4","name":"test_post_vote[a-expected_status6-Invalid non-integer vote value]","fullName":"tests.test_votes#test_post_vote","historyId":"333804228427d8d3a4046afd05ef0f98","time":{"start":1759147482988,"stop":1759147483525,"duration":537},"status":"failed","statusMessage":"AssertionError: Unexpected status code: 201\nassert 201 in [400]\n +  where 201 = <Response [201]>.status_code","statusTrace":"user_client = <api_clients.user_api_client.UserApiClient object at 0x7f5a497a0ac0>\nimage_testdata = {'breeds': [], 'height': 333, 'id': '2g6', 'url': 'https://cdn2.thecatapi.com/images/2g6.jpg', ...}\nvote_value = 'a', expected_status = [400]\ncomment = 'Invalid non-integer vote value'\n\n    @pytest.mark.parametrize(\n            \"vote_value, expected_status, comment\",\n            [\n                (1, [200, 201], \"Valid vote value 1\"),\n                (0, [400], \"Invalid vote value 0\"),\n                (6, [400], \"Invalid vote value 6\"),\n                (-1, [400], \"Invalid negative vote value\"),\n                (None, [400], \"Invalid None vote value\"),\n                (-5, [400], \"Invalid vote value -5\"),\n                (\"a\", [400], \"Invalid non-integer vote value\"),\n            ]\n    )\n    def test_post_vote(user_client,  image_testdata, vote_value, expected_status, comment):\n        vote_data = {\n            \"image_id\": image_testdata[\"id\"],\n            \"value\": vote_value\n        }\n        post_vote_response = user_client.post_vote(vote_data, raise_for_status=False)\n>       assert post_vote_response.status_code in expected_status, f\"Unexpected status code: {post_vote_response.status_code}\"\nE       AssertionError: Unexpected status code: 201\nE       assert 201 in [400]\nE        +  where 201 = <Response [201]>.status_code\n\ntests/test_votes.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"user_client","time":{"start":1759147466835,"stop":1759147466835,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"image_testdata","time":{"start":1759147482683,"stop":1759147482986,"duration":303},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"image_testdata::0","time":{"start":1759147483529,"stop":1759147483529,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_votes"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2167-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_votes"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"comment","value":"'Invalid non-integer vote value'"},{"name":"expected_status","value":"[400]"},{"name":"vote_value","value":"'a'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7ad344b9042515f4.json","parameterValues":["'Invalid non-integer vote value'","[400]","'a'"]}